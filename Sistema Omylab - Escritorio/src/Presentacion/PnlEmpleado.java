/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import Entidad.ClsEHistorial;
import Negocios.ClsNHistorial;
import Entidad.ClsEEmpleado;
import Entidad.ClsERol;
import Entidad.ClsETipo_documento;
import Negocios.ClsNEmpleado;
import Negocios.ClsNRol;
import Negocios.ClsNTipo_documento;
import static Presentacion.FrmPrincipal.lblApellidos;
import static Presentacion.FrmPrincipal.lblDni;
import static Presentacion.FrmPrincipal.lblNombres;
import static Presentacion.PnlCliente.ListarCliente;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Brian Anco
 */
public class PnlEmpleado extends javax.swing.JPanel {

    /**
     * Creates new form PnlOrdenes
     */
    public PnlEmpleado() {
        initComponents();
        ListarEmpleado();
        LimpiarEmpleado();
        LlenarComboRol();
        LlenarComboRoTipoDoc();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rSPanel1 = new necesario.RSPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNumDoc = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNombres = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtApellidos = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEmpleados = new javax.swing.JTable();
        btnGuardar = new RSMaterialComponent.RSButtonMaterialIconOne();
        btnBuscar = new RSMaterialComponent.RSButtonMaterialIconOne();
        btnEditar = new RSMaterialComponent.RSButtonMaterialIconOne();
        txtDireccion = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtCelular = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtClave = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cboRol = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        cboEstado1 = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        txtCalendar = new com.toedter.calendar.JDateChooser();
        btnLimpiar = new RSMaterialComponent.RSButtonMaterialIconOne();
        cboTipoDoc = new javax.swing.JComboBox<>();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rSPanel1.setColorBackground(new java.awt.Color(255, 255, 255));
        rSPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(235, 73, 51));
        jLabel1.setText("GESTIONAR EMPLEADOS");
        rSPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Nro. Doc.");
        rSPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 105, -1, -1));

        txtNumDoc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtNumDoc.setPreferredSize(new java.awt.Dimension(150, 28));
        txtNumDoc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumDocKeyTyped(evt);
            }
        });
        rSPanel1.add(txtNumDoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 100, -1));

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Nombres");
        rSPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 145, -1, -1));

        txtNombres.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtNombres.setPreferredSize(new java.awt.Dimension(150, 28));
        rSPanel1.add(txtNombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 320, -1));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Tipo Doc.");
        rSPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 105, -1, -1));

        txtApellidos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtApellidos.setPreferredSize(new java.awt.Dimension(150, 28));
        rSPanel1.add(txtApellidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, 320, -1));

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Apellidos");
        rSPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 185, -1, -1));

        tblEmpleados.setAutoCreateRowSorter(true);
        tblEmpleados.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblEmpleados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nro. Doc.", "Nombres", "Apellidos", "Rol", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEmpleados.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblEmpleados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEmpleadosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblEmpleados);
        if (tblEmpleados.getColumnModel().getColumnCount() > 0) {
            tblEmpleados.getColumnModel().getColumn(0).setResizable(false);
            tblEmpleados.getColumnModel().getColumn(0).setPreferredWidth(80);
            tblEmpleados.getColumnModel().getColumn(1).setResizable(false);
            tblEmpleados.getColumnModel().getColumn(1).setPreferredWidth(150);
            tblEmpleados.getColumnModel().getColumn(2).setResizable(false);
            tblEmpleados.getColumnModel().getColumn(2).setPreferredWidth(166);
            tblEmpleados.getColumnModel().getColumn(3).setResizable(false);
            tblEmpleados.getColumnModel().getColumn(3).setPreferredWidth(79);
            tblEmpleados.getColumnModel().getColumn(4).setResizable(false);
            tblEmpleados.getColumnModel().getColumn(4).setPreferredWidth(59);
        }

        rSPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 101, 540, 420));

        btnGuardar.setBackground(new java.awt.Color(56, 171, 38));
        btnGuardar.setBackgroundHover(new java.awt.Color(56, 178, 72));
        btnGuardar.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.SAVE);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        rSPanel1.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 400, 30, 28));

        btnBuscar.setBackground(new java.awt.Color(244, 146, 34));
        btnBuscar.setBackgroundHover(new java.awt.Color(251, 169, 76));
        btnBuscar.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.SEARCH);
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        rSPanel1.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, 30, 28));

        btnEditar.setBackground(new java.awt.Color(254, 221, 14));
        btnEditar.setBackgroundHover(new java.awt.Color(254, 218, 75));
        btnEditar.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.EDIT);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        rSPanel1.add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 400, 30, 28));

        txtDireccion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtDireccion.setPreferredSize(new java.awt.Dimension(150, 28));
        rSPanel1.add(txtDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 220, 320, -1));

        jLabel7.setBackground(new java.awt.Color(0, 0, 0));
        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Direcci√≥n");
        rSPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 225, -1, -1));

        txtCelular.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtCelular.setPreferredSize(new java.awt.Dimension(150, 28));
        rSPanel1.add(txtCelular, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 260, 120, -1));

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Celular");
        rSPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 265, -1, -1));

        txtClave.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtClave.setPreferredSize(new java.awt.Dimension(150, 28));
        rSPanel1.add(txtClave, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 350, 120, -1));

        jLabel9.setBackground(new java.awt.Color(0, 0, 0));
        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Clave");
        rSPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 355, -1, -1));

        jLabel10.setBackground(new java.awt.Color(0, 0, 0));
        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Nacimiento");
        rSPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, -1, -1));

        jLabel11.setBackground(new java.awt.Color(0, 0, 0));
        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Fecha de");
        rSPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, -1, -1));

        cboRol.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cboRol.setPreferredSize(new java.awt.Dimension(93, 28));
        rSPanel1.add(cboRol, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 350, 120, -1));

        jLabel6.setBackground(new java.awt.Color(0, 0, 0));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Rol");
        rSPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 355, -1, -1));

        cboEstado1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cboEstado1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activo", "Inactivo" }));
        cboEstado1.setPreferredSize(new java.awt.Dimension(93, 28));
        rSPanel1.add(cboEstado1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 260, 100, -1));

        jLabel12.setBackground(new java.awt.Color(0, 0, 0));
        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("Estado");
        rSPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 265, -1, -1));

        txtCalendar.setDateFormatString("dd/MM/yyyy");
        rSPanel1.add(txtCalendar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 300, 320, 30));

        btnLimpiar.setBackground(new java.awt.Color(0, 153, 153));
        btnLimpiar.setBackgroundHover(new java.awt.Color(153, 204, 255));
        btnLimpiar.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.EDIT);
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        rSPanel1.add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 400, 30, 28));

        cboTipoDoc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cboTipoDoc.setPreferredSize(new java.awt.Dimension(93, 28));
        cboTipoDoc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboTipoDocItemStateChanged(evt);
            }
        });
        rSPanel1.add(cboTipoDoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 100, 100, -1));

        add(rSPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 570));
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        ClsEEmpleado objEE=new ClsEEmpleado();
        ClsNEmpleado objNE=new ClsNEmpleado();

        objEE.setNro_documento(txtNumDoc.getText());
        objEE.setNombre(txtNombres.getText());
        objEE.setApellido(txtApellidos.getText());   
        
        String dia = Integer.toString(txtCalendar.getCalendar().get(Calendar.DAY_OF_MONTH));
        String mes = Integer.toString(txtCalendar.getCalendar().get(Calendar.MONTH) + 1);
        String year = Integer.toString(txtCalendar.getCalendar().get(Calendar.YEAR));
        String fecha = (year + "-" + mes+ "-" + dia);
        
        objEE.setFecha_nacimiento(fecha);
        objEE.setDireccion(txtDireccion.getText());
        objEE.setCelular(txtCelular.getText());
        objEE.setClave(txtClave.getText());
        objEE.setCelular(txtCelular.getText());
        String estado=String.valueOf(cboEstado1.getSelectedItem());
        if(estado.equals("Activo")){
            objEE.setEstado(1);
        }
        if(estado.equals("Inactivo")){
            objEE.setEstado(0);
        }
        
        String idRol=String.valueOf(cboRol.getSelectedItem());
        ClsNRol objNR=new ClsNRol();
        for(ClsERol objER:objNR.MtdListarRol()){
            if(idRol.equals(objER.getDescripcion()))
            {
                objEE.setIdRol(objER.getIdRol());
                break;
            }
        }
        
        String idTipo=String.valueOf(cboTipoDoc.getSelectedItem());
        ClsNTipo_documento objND=new ClsNTipo_documento();
        for(ClsETipo_documento objE:objND.MtdListarTipo_documento()){
            if(idTipo.equals(objE.getDescripcion()))
            {
                objEE.setIdTipo_doc(objE.getIdTipo_documento());
                break;
            }
        }
        if(objNE.MtdRegistrarEmpleado(objEE)==true){
            JOptionPane.showMessageDialog(null, "Datos guardados correctamente.");
            //GUARDAR HISTORIAL - REGISTRAR
            ClsNHistorial objNH=new ClsNHistorial();
            ClsEHistorial objEH = new ClsEHistorial();
            Date date = new Date();
            DateFormat FechaHora = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            objEH.setFecha(FechaHora.format(date)+"");
            objEH.setTipo("Insertar Empleado");
            objEH.setAccion(lblNombres.getText()+" "+lblApellidos.getText()+ " registro un Empleado: "+txtNombres.getText()+" "+txtApellidos.getText());
            objEH.setNro_doc(lblDni.getText());
            if(objNH.MtdRegistrarHistorial(objEH)==true){
            }
            else{
                JOptionPane.showMessageDialog(null, "Error al registrar accion.");
            }
            //FIN GUARDAR HISTORIAL - REGISTRAR
        }
        else{
            JOptionPane.showMessageDialog(null, "Error de Datos");
        }
        ListarEmpleado();
        LimpiarEmpleado();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void tblEmpleadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEmpleadosMouseClicked
        // TODO add your handling code here:
        txtNumDoc.setEditable(false);        
        int seleccionar=tblEmpleados.rowAtPoint(evt.getPoint());
        
        txtNumDoc.setText(String.valueOf(tblEmpleados.getValueAt(seleccionar, 0)));
        txtNombres.setText(String.valueOf(tblEmpleados.getValueAt(seleccionar, 1)));
        txtApellidos.setText(String.valueOf(tblEmpleados.getValueAt(seleccionar, 2)));
        cboRol.setSelectedItem(String.valueOf(tblEmpleados.getValueAt(seleccionar, 3)));
        cboEstado1.setSelectedItem(String.valueOf(tblEmpleados.getValueAt(seleccionar, 4)));
        
        ClsNEmpleado objNE=new ClsNEmpleado();
        for(ClsEEmpleado objEE:objNE.MtdListarEmpleado()){
            
            if(txtNumDoc.getText().equals(objEE.getNro_documento()))
            {
                SimpleDateFormat formatoDelTexto = new SimpleDateFormat("yyyy-MM-dd");
                String strFecha = objEE.getFecha_nacimiento();
                Date fecha = null;
                try {
                    fecha = formatoDelTexto.parse(strFecha);
                } catch (ParseException ex) {
                    ex.printStackTrace();
                }
                txtCalendar.setDate(fecha);
                txtDireccion.setText(objEE.getDireccion());
                txtCelular.setText(objEE.getCelular());
                txtClave.setText(objEE.getClave());
                
                int idTipo_doc=objEE.getIdTipo_doc();
                ClsNTipo_documento objNR=new ClsNTipo_documento();
                for(ClsETipo_documento objER:objNR.MtdListarTipo_documento()){
                    if(idTipo_doc==objER.getIdTipo_documento())
                    {
                        String tipodoc=String.valueOf(objER.getDescripcion());
                        cboTipoDoc.setSelectedItem(tipodoc);
                        break;
                    }
                }
                String tiposelect=String.valueOf(cboTipoDoc.getSelectedItem());
                if(tiposelect.equals("DNI")){
                    txtNombres.setEditable(false);
                    txtApellidos.setEditable(false);
                    txtNumDoc.setEditable(false);
                }
                else{
                    txtNombres.setEditable(true);
                    txtApellidos.setEditable(true);
                    txtNumDoc.setEditable(true);
                }
                break;
            }
        }
    }//GEN-LAST:event_tblEmpleadosMouseClicked

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        String tiposelect=String.valueOf(cboTipoDoc.getSelectedItem());
        if(tiposelect.equals("DNI")){
            String token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImFuY29icmlhbjZAZ21haWwuY29tIn0.PTLq2kMGMK3A5XTbdmRAUMDLRn3f5eS2eMF1TV0CtLM";
            String dni=txtNumDoc.getText();
            String enlace="https://dniruc.apisperu.com/api/v1/dni/" + dni + "?token=" + token;
            try {
                URL url=new URL(enlace);
                URLConnection request=url.openConnection();
                request.connect();

                JsonParser jp= new JsonParser();
                JsonElement root = jp.parse(new InputStreamReader((InputStream)request.getContent()));
                if(root.isJsonObject()){
                    JsonObject rootobj = root.getAsJsonObject();

                    String apellidos;
                    String ape1=rootobj.get("apellidoPaterno").getAsString();
                    String ape2=rootobj.get("apellidoMaterno").getAsString();
                    String nombres=rootobj.get("nombres").getAsString();
                    apellidos=ape1+" "+ape2;
                    txtNombres.setText(nombres);
                    txtApellidos.setText(apellidos);
                    
                    txtNumDoc.setEditable(false);
                    txtNombres.setEditable(false);
                    txtApellidos.setEditable(false);
                }
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,e.getMessage());
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Solo se puede buscar DNI");
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
        ClsEEmpleado objEE=new ClsEEmpleado();
        ClsNEmpleado objNE=new ClsNEmpleado();

        //GUARDAR HISTORIAL - MODIFICAR
        ClsNHistorial objNH=new ClsNHistorial();
        ClsEHistorial objEH = new ClsEHistorial();
        Date date = new Date();
        DateFormat FechaHora = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String accion="";
        
        //Recorremos los resultados del m√©todo Listar.
        for(ClsEEmpleado objE:objNE.MtdListarEmpleado()){
            //If para buscar el ID de la fila a modificar.
            if(txtNumDoc.getText().equals(String.valueOf(objE.getNro_documento()))){
                //If para buscar diferencias en los atributos.
                if(txtDireccion.getText().equals(objE.getDireccion())){
                    
                }
                else{
                    //Insersi√≥n en la tabla Historial.
                    objEH.setFecha(FechaHora.format(date)+"");
                    objEH.setTipo("Modificar Empleado");
                    objEH.setAccion(lblNombres.getText()+" "+lblApellidos.getText()+ " modifico el Empleado:"+objE.getNro_documento()+" - Direccion: "+objE.getDireccion()+" a "+txtDireccion.getText());
                    objEH.setNro_doc(lblDni.getText());
                    if(objNH.MtdRegistrarHistorial(objEH)==true){
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Error al registrar accion.");
                    }
                }
                //=============
                if(txtClave.getText().equals(objE.getClave())){
                    
                }
                else{
                    //Insersi√≥n en la tabla Historial.
                    objEH.setFecha(FechaHora.format(date)+"");
                    objEH.setTipo("Modificar Empleado");
                    objEH.setAccion(lblNombres.getText()+" "+lblApellidos.getText()+ " modifico el Empleado:"+objE.getNro_documento()+" - Clave: "+objE.getClave()+" a "+txtClave.getText());
                    objEH.setNro_doc(lblDni.getText());
                    if(objNH.MtdRegistrarHistorial(objEH)==true){
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Error al registrar accion.");
                    }
                }
                //=============
                if(txtCelular.getText().equals(objE.getCelular())){
                    
                }
                else{
                    //Insersi√≥n en la tabla Historial.
                    objEH.setFecha(FechaHora.format(date)+"");
                    objEH.setTipo("Modificar Empleado");
                    objEH.setAccion(lblNombres.getText()+" "+lblApellidos.getText()+ " modifico el Empleado:"+objE.getNro_documento()+" - Celular: "+objE.getCelular()+" a "+txtCelular.getText());
                    objEH.setNro_doc(lblDni.getText());
                    if(objNH.MtdRegistrarHistorial(objEH)==true){
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Error al registrar accion.");
                    }
                }
                //=============
                String estado1=String.valueOf(cboEstado1.getSelectedItem());
                int est=0;
                    if(estado1.equals("Activo")){
                        est=1;
                        }
                    if(estado1.equals("Inactivo")){
                        est=0;
                    }
                String estadoanterior="";
                if(est==1){
                    estadoanterior="Inactivo";
                }else{
                    estadoanterior="Activo";
                }
                if(est==(objE.getEstado())){
                    
                }
                else{
                    //Insersi√≥n en la tabla Historial.
                    objEH.setFecha(FechaHora.format(date)+"");
                    objEH.setTipo("Modificar Empleado");
                    objEH.setAccion(lblNombres.getText()+" "+lblApellidos.getText()+ " modifico el Empleado:"+objE.getNro_documento()+" - Estado: "+estadoanterior+" a "+cboEstado1.getSelectedItem());
                    objEH.setNro_doc(lblDni.getText());
                    if(objNH.MtdRegistrarHistorial(objEH)==true){
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Error al registrar accion.");
                    }
                }
                //=============
                String dia1 = Integer.toString(txtCalendar.getCalendar().get(Calendar.DAY_OF_MONTH));
                    String mes1 = Integer.toString(txtCalendar.getCalendar().get(Calendar.MONTH) + 1);
                    String year1 = Integer.toString(txtCalendar.getCalendar().get(Calendar.YEAR));
                    String fecha1 = (year1 + "-" + mes1+ "-" + dia1);
                if(fecha1.equals(objE.getFecha_nacimiento())){
                    
                }
                else{
                    //String dia1 = Integer.toString(txtCalendar.getCalendar().get(Calendar.DAY_OF_MONTH));
                    //String mes1 = Integer.toString(txtCalendar.getCalendar().get(Calendar.MONTH) + 1);
                    //String year1 = Integer.toString(txtCalendar.getCalendar().get(Calendar.YEAR));
                    //String fecha1 = (year1 + "-" + mes1+ "-" + dia1);
                    //Insersi√≥n en la tabla Historial.
                    objEH.setFecha(FechaHora.format(date)+"");
                    objEH.setTipo("Modificar Empleado");
                    objEH.setAccion(lblNombres.getText()+" "+lblApellidos.getText()+ " modifico el Empleado:"+objE.getNro_documento()+" - Fech Nacimiento: "+objE.getFecha_nacimiento()+" a "+fecha1);
                    objEH.setNro_doc(lblDni.getText());
                    if(objNH.MtdRegistrarHistorial(objEH)==true){
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Error al registrar accion.");
                    }
                }
                //=============
                ClsERol objER=new ClsERol();
                ClsNRol objNR=new ClsNRol();
                String Rol1="";
                for(ClsERol objR:objNR.MtdListarRol()){
                    if(objE.getIdRol()==(objR.getIdRol())){
                        Rol1=objR.getDescripcion();
                    }
                }
                
                if(cboRol.getSelectedItem().equals(Rol1)){
                    
                }
                else{
                    //Insersi√≥n en la tabla Historial.
                    objEH.setFecha(FechaHora.format(date)+"");
                    objEH.setTipo("Modificar Empleado");
                    objEH.setAccion(lblNombres.getText()+" "+lblApellidos.getText()+ " modifico el Empleado:"+objE.getNro_documento()+" - Rol: "+Rol1+" a "+cboRol.getSelectedItem());
                    objEH.setNro_doc(lblDni.getText());
                    if(objNH.MtdRegistrarHistorial(objEH)==true){
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Error al registrar accion.");
                    }
                }
            }
            
            
        }
        
        //FIN GUARDAR HISTORIAL - MODIFICAR
        
        objEE.setNro_documento(txtNumDoc.getText());
        objEE.setNombre(txtNombres.getText());
        objEE.setApellido(txtApellidos.getText());   
        
        String dia = Integer.toString(txtCalendar.getCalendar().get(Calendar.DAY_OF_MONTH));
        String mes = Integer.toString(txtCalendar.getCalendar().get(Calendar.MONTH) + 1);
        String year = Integer.toString(txtCalendar.getCalendar().get(Calendar.YEAR));
        String fecha = (year + "-" + mes+ "-" + dia);
        
        objEE.setFecha_nacimiento(fecha);
        objEE.setDireccion(txtDireccion.getText());
        objEE.setCelular(txtCelular.getText());
        objEE.setClave(txtClave.getText());
        objEE.setCelular(txtCelular.getText());
        String estado=String.valueOf(cboEstado1.getSelectedItem());
        if(estado.equals("Activo")){
            objEE.setEstado(1);
        }
        if(estado.equals("Inactivo")){
            objEE.setEstado(0);
        }
        
        String idRol=String.valueOf(cboRol.getSelectedItem());
        ClsNRol objNR=new ClsNRol();
        
        for(ClsERol objER:objNR.MtdListarRol()){
            if(idRol.equals(objER.getDescripcion()))
            {
                objEE.setIdRol(objER.getIdRol());
                FrmPrincipal.lblRol.setText(objER.getIdRol()+"");
                break;
            }
        }
        
        String idTipo=String.valueOf(cboTipoDoc.getSelectedItem());
        ClsNTipo_documento objND=new ClsNTipo_documento();
        for(ClsETipo_documento objE:objND.MtdListarTipo_documento()){
            if(idTipo.equals(objE.getDescripcion()))
            {
                objEE.setIdTipo_doc(objE.getIdTipo_documento());
                break;
            }
        }
        if(objNE.MtdModificarEmpleado(objEE)==true){
            JOptionPane.showMessageDialog(null, "Datos guardados correctamente.");
        }
        else{
            JOptionPane.showMessageDialog(null, "Error de Datos");
        }
        ListarEmpleado();
        LimpiarEmpleado();
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        LimpiarEmpleado();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void txtNumDocKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumDocKeyTyped
        // TODO add your handling code here:
        if(cboTipoDoc.getSelectedItem().equals("DNI")){
            if (txtNumDoc.getText().length()== 8) 
            evt.consume();             
        }        
    }//GEN-LAST:event_txtNumDocKeyTyped

    private void cboTipoDocItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboTipoDocItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cboTipoDocItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private RSMaterialComponent.RSButtonMaterialIconOne btnBuscar;
    private RSMaterialComponent.RSButtonMaterialIconOne btnEditar;
    private RSMaterialComponent.RSButtonMaterialIconOne btnGuardar;
    private RSMaterialComponent.RSButtonMaterialIconOne btnLimpiar;
    private javax.swing.JComboBox<String> cboEstado1;
    private static javax.swing.JComboBox<String> cboRol;
    private static javax.swing.JComboBox<String> cboTipoDoc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private necesario.RSPanel rSPanel1;
    private javax.swing.JTable tblEmpleados;
    private javax.swing.JTextField txtApellidos;
    private com.toedter.calendar.JDateChooser txtCalendar;
    private javax.swing.JTextField txtCelular;
    private javax.swing.JTextField txtClave;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JTextField txtNumDoc;
    // End of variables declaration//GEN-END:variables

    private void ListarEmpleado() {
        DefaultTableModel modelo = (DefaultTableModel) tblEmpleados.getModel();
        try {
            int filas=tblEmpleados.getRowCount();
            for (int i = 0;filas>i; i++) {
                modelo.removeRow(0);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al limpiar la tabla.");
        }
        ClsNEmpleado objNC=new ClsNEmpleado();
        String[] datos=new String[10];
        for(ClsEEmpleado objE:objNC.MtdListarEmpleado()){
            datos[0]=objE.getNro_documento();
            datos[1]=objE.getNombre();
            datos[2]=objE.getApellido();
            int idRol=objE.getIdRol();
            ClsNRol objNR=new ClsNRol();
            for(ClsERol  objR:objNR.MtdListarRol()){
                if(idRol==objR.getIdRol())
                {
                    datos[3]=objR.getDescripcion();
                    break;
                }
            }    
            if(String.valueOf(objE.getEstado()).equals("1")){
                datos[4]="Activo";                
            }
            if(String.valueOf(objE.getEstado()).equals("0")){
                datos[4]="Inactivo";                
            }  
            modelo.addRow(datos);
        }
        TableRowSorter<TableModel> Id = new TableRowSorter<TableModel>(modelo);
        tblEmpleados.setRowSorter(Id);
        tblEmpleados.getRowSorter().toggleSortOrder(2);
    }

    private void LimpiarEmpleado() {      
        txtNumDoc.setText("");
        txtNombres.setText("");
        txtApellidos.setText("");
        txtDireccion.setText("");
        txtCelular.setText("");
        txtClave.setText("");     
        txtNumDoc.setEditable(true);
        txtNombres.setEditable(true);
        txtApellidos.setEditable(true);
        
    }

    public static void LlenarComboRol() {
        cboRol.removeAllItems();
        ClsNRol objNR=new ClsNRol();
            for(ClsERol  objR:objNR.MtdListarRol()){
                cboRol.addItem(String.valueOf(objR.getDescripcion()));
            }    
    }
    public static void LlenarComboRoTipoDoc() {
        cboTipoDoc.removeAllItems();        
        ClsNTipo_documento objNR=new ClsNTipo_documento();
            for(ClsETipo_documento  objR:objNR.MtdListarTipo_documento()){
                String tipo_doc=String.valueOf(objR.getDescripcion());
                if(tipo_doc.equals("BOLETA")||tipo_doc.equals("FACTURA")){
                    int a;
                }
                else{
                    cboTipoDoc.addItem(String.valueOf(objR.getDescripcion()));
                }
            }    
    }
}
