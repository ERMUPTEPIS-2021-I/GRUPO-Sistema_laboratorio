/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import Entidad.ClsECliente;
import Entidad.ClsEDoc_Compra_Venta;
import Entidad.ClsEDoc_compra_venta_Producto;
import Entidad.ClsEEmpleado;
import Entidad.ClsEOrden;
import Entidad.ClsEProducto;
import Entidad.ClsEProducto_detalle;
import Entidad.ClsEProveedor;
import Entidad.ClsETipo_documento;
import Entidad.ClsETipo_medida;
import Negocios.ClsNCliente;
import Negocios.ClsNDoc_Compra_Venta;
import Negocios.ClsNDoc_compra_venta_Producto;
import Negocios.ClsNEmpleado;
import Negocios.ClsNOrden;
import Negocios.ClsNProducto;
import Negocios.ClsNProducto_detalle;
import Negocios.ClsNProveedor;
import Negocios.ClsNTipo_documento;
import Negocios.ClsNTipo_medida;
import static Presentacion.PnlCliente.ListarCliente;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Brian Anco
 */
public class PnlVentas extends javax.swing.JPanel {

    /**
     * Creates new form PnlOrdenes
     */
    public PnlVentas() {
        initComponents();
        ListarTodo();
        ListarProductos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rSPanel1 = new necesario.RSPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNumDoc = new javax.swing.JTextField();
        txtRazonSocial = new javax.swing.JTextField();
        lblidCompraVenta = new javax.swing.JLabel();
        cboTipoCompraVenta = new javax.swing.JComboBox<>();
        txtEmpleado = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrdenes = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblProductosFactura = new javax.swing.JTable();
        btnGuardar = new RSMaterialComponent.RSButtonMaterialIconOne();
        btnDerecha = new RSMaterialComponent.RSButtonMaterialOne();
        btnIzquierda = new RSMaterialComponent.RSButtonMaterialOne();
        btnLimpiar = new RSMaterialComponent.RSButtonMaterialIconOne();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblProductosTodos = new javax.swing.JTable();
        btnDerecha1 = new RSMaterialComponent.RSButtonMaterialOne();
        btnDerecha2 = new RSMaterialComponent.RSButtonMaterialOne();
        btnDerecha3 = new RSMaterialComponent.RSButtonMaterialOne();
        jLabel6 = new javax.swing.JLabel();
        cboTipoDocumento = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        btnEditar1 = new RSMaterialComponent.RSButtonMaterialIconOne();
        txtCalendar = new com.toedter.calendar.JDateChooser();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        txtnroProveedor = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        btnBuscarProveedor = new RSMaterialComponent.RSButtonMaterialIconOne();
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtProveedor = new javax.swing.JTextField();
        txtPrecioCompra = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rSPanel1.setColorBackground(new java.awt.Color(255, 255, 255));
        rSPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(235, 73, 51));
        jLabel1.setText("COMPRAS Y VENTAS");
        rSPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Nro. Doc.");
        rSPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 110, -1, -1));

        txtNumDoc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtNumDoc.setPreferredSize(new java.awt.Dimension(150, 28));
        rSPanel1.add(txtNumDoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 100, 210, -1));

        txtRazonSocial.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtRazonSocial.setText("Laboratorio cl√≠nico OMYLAB");
        txtRazonSocial.setPreferredSize(new java.awt.Dimension(150, 28));
        rSPanel1.add(txtRazonSocial, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 100, 310, -1));

        lblidCompraVenta.setBackground(new java.awt.Color(0, 0, 0));
        lblidCompraVenta.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblidCompraVenta.setForeground(new java.awt.Color(255, 255, 255));
        lblidCompraVenta.setText("id");
        rSPanel1.add(lblidCompraVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 50, 30, -1));

        cboTipoCompraVenta.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cboTipoCompraVenta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "COMPRA", "VENTA" }));
        cboTipoCompraVenta.setPreferredSize(new java.awt.Dimension(93, 28));
        cboTipoCompraVenta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboTipoCompraVentaItemStateChanged(evt);
            }
        });
        rSPanel1.add(cboTipoCompraVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 140, -1));

        txtEmpleado.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtEmpleado.setPreferredSize(new java.awt.Dimension(150, 28));
        rSPanel1.add(txtEmpleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 140, 310, -1));

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Empleado");
        rSPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 150, -1, -1));

        tblOrdenes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblOrdenes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nro. Doc.", "Razon social", "Total", "Tipo doc.", "Fecha"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrdenes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrdenesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblOrdenes);
        if (tblOrdenes.getColumnModel().getColumnCount() > 0) {
            tblOrdenes.getColumnModel().getColumn(0).setResizable(false);
            tblOrdenes.getColumnModel().getColumn(1).setResizable(false);
            tblOrdenes.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblOrdenes.getColumnModel().getColumn(2).setResizable(false);
            tblOrdenes.getColumnModel().getColumn(2).setPreferredWidth(65);
            tblOrdenes.getColumnModel().getColumn(3).setResizable(false);
            tblOrdenes.getColumnModel().getColumn(3).setPreferredWidth(80);
            tblOrdenes.getColumnModel().getColumn(4).setResizable(false);
            tblOrdenes.getColumnModel().getColumn(4).setPreferredWidth(100);
        }

        rSPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 280, 480, 240));

        tblProductosFactura.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblProductosFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Producto", "P. C.", "Cant"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProductosFactura.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                tblProductosFacturaComponentAdded(evt);
            }
        });
        jScrollPane3.setViewportView(tblProductosFactura);
        if (tblProductosFactura.getColumnModel().getColumnCount() > 0) {
            tblProductosFactura.getColumnModel().getColumn(0).setResizable(false);
            tblProductosFactura.getColumnModel().getColumn(0).setPreferredWidth(10);
            tblProductosFactura.getColumnModel().getColumn(1).setResizable(false);
            tblProductosFactura.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblProductosFactura.getColumnModel().getColumn(2).setResizable(false);
            tblProductosFactura.getColumnModel().getColumn(2).setPreferredWidth(15);
            tblProductosFactura.getColumnModel().getColumn(3).setResizable(false);
            tblProductosFactura.getColumnModel().getColumn(3).setPreferredWidth(10);
        }

        rSPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 280, 240, 240));

        btnGuardar.setBackground(new java.awt.Color(56, 171, 38));
        btnGuardar.setBackgroundHover(new java.awt.Color(56, 178, 72));
        btnGuardar.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.SAVE);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        rSPanel1.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 530, 30, 28));

        btnDerecha.setBackground(new java.awt.Color(244, 146, 34));
        btnDerecha.setText("Ver Todo");
        btnDerecha.setBackgroundHover(new java.awt.Color(251, 169, 76));
        btnDerecha.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDerecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDerechaActionPerformed(evt);
            }
        });
        rSPanel1.add(btnDerecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 240, 120, 28));

        btnIzquierda.setBackground(new java.awt.Color(244, 146, 34));
        btnIzquierda.setText("<");
        btnIzquierda.setBackgroundHover(new java.awt.Color(251, 169, 76));
        btnIzquierda.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzquierdaActionPerformed(evt);
            }
        });
        rSPanel1.add(btnIzquierda, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 410, 28, 28));

        btnLimpiar.setBackground(new java.awt.Color(51, 12, 229));
        btnLimpiar.setBackgroundHover(new java.awt.Color(51, 51, 255));
        btnLimpiar.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.BACKSPACE);
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        rSPanel1.add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 530, 30, 28));

        jLabel14.setBackground(new java.awt.Color(0, 0, 0));
        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(237, 125, 52));
        jLabel14.setText("Detalle de la Factura");
        rSPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 230, -1, -1));

        jLabel15.setBackground(new java.awt.Color(0, 0, 0));
        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(237, 125, 52));
        jLabel15.setText("Todos los Productos");
        rSPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, -1, -1));

        tblProductosTodos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblProductosTodos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Producto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProductosTodos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductosTodosMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblProductosTodos);
        if (tblProductosTodos.getColumnModel().getColumnCount() > 0) {
            tblProductosTodos.getColumnModel().getColumn(0).setResizable(false);
            tblProductosTodos.getColumnModel().getColumn(0).setPreferredWidth(10);
            tblProductosTodos.getColumnModel().getColumn(1).setResizable(false);
        }

        rSPanel1.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, 170, 240));

        btnDerecha1.setBackground(new java.awt.Color(244, 146, 34));
        btnDerecha1.setText(">");
        btnDerecha1.setBackgroundHover(new java.awt.Color(251, 169, 76));
        btnDerecha1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnDerecha1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDerecha1ActionPerformed(evt);
            }
        });
        rSPanel1.add(btnDerecha1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 370, 28, 28));

        btnDerecha2.setBackground(new java.awt.Color(244, 146, 34));
        btnDerecha2.setText("Ver Ventas");
        btnDerecha2.setBackgroundHover(new java.awt.Color(251, 169, 76));
        btnDerecha2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDerecha2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDerecha2ActionPerformed(evt);
            }
        });
        rSPanel1.add(btnDerecha2, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 240, 120, 28));

        btnDerecha3.setBackground(new java.awt.Color(244, 146, 34));
        btnDerecha3.setText("Ver Compras");
        btnDerecha3.setBackgroundHover(new java.awt.Color(251, 169, 76));
        btnDerecha3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDerecha3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDerecha3ActionPerformed(evt);
            }
        });
        rSPanel1.add(btnDerecha3, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 240, 120, 28));

        jLabel6.setBackground(new java.awt.Color(0, 0, 0));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Raz√≥n social");
        rSPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 110, -1, -1));

        cboTipoDocumento.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cboTipoDocumento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FACTURA", "BOLETA" }));
        cboTipoDocumento.setPreferredSize(new java.awt.Dimension(93, 28));
        rSPanel1.add(cboTipoDocumento, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 140, -1));

        jLabel9.setBackground(new java.awt.Color(0, 0, 0));
        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Total");
        rSPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 185, -1, -1));

        btnEditar1.setBackground(new java.awt.Color(255, 255, 255));
        btnEditar1.setBackgroundHover(new java.awt.Color(255, 255, 255));
        btnEditar1.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.EDIT);
        rSPanel1.add(btnEditar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 558, 10, 10));

        txtCalendar.setDateFormatString("dd/MM/yyyy");
        rSPanel1.add(txtCalendar, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 140, 210, 30));

        jLabel10.setBackground(new java.awt.Color(0, 0, 0));
        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Tipo Doc.");
        rSPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 145, -1, -1));

        jLabel11.setBackground(new java.awt.Color(0, 0, 0));
        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Fecha");
        rSPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 150, -1, -1));

        txtTotal.setEditable(false);
        txtTotal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtTotal.setText("0");
        txtTotal.setPreferredSize(new java.awt.Dimension(150, 28));
        rSPanel1.add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, 140, -1));

        txtnroProveedor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtnroProveedor.setPreferredSize(new java.awt.Dimension(150, 28));
        rSPanel1.add(txtnroProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 180, 170, -1));

        jLabel12.setBackground(new java.awt.Color(0, 0, 0));
        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("Nro. Prov.");
        rSPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 190, -1, -1));

        btnBuscarProveedor.setBackground(new java.awt.Color(244, 146, 34));
        btnBuscarProveedor.setBackgroundHover(new java.awt.Color(251, 169, 76));
        btnBuscarProveedor.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.SEARCH);
        btnBuscarProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarProveedorActionPerformed(evt);
            }
        });
        rSPanel1.add(btnBuscarProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 180, 30, 30));

        jLabel7.setBackground(new java.awt.Color(0, 0, 0));
        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Tipo");
        rSPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 105, -1, -1));

        jLabel13.setBackground(new java.awt.Color(0, 0, 0));
        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("Proveedor");
        rSPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 190, -1, -1));

        txtProveedor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtProveedor.setPreferredSize(new java.awt.Dimension(150, 28));
        rSPanel1.add(txtProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 180, 310, -1));

        txtPrecioCompra.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtPrecioCompra.setPreferredSize(new java.awt.Dimension(150, 28));
        rSPanel1.add(txtPrecioCompra, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 530, 70, -1));

        jLabel16.setBackground(new java.awt.Color(0, 0, 0));
        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel16.setText("Precio compra");
        rSPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 535, -1, -1));

        jLabel17.setBackground(new java.awt.Color(0, 0, 0));
        jLabel17.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel17.setText("Cantidad");
        rSPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 535, -1, -1));

        txtCantidad.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtCantidad.setPreferredSize(new java.awt.Dimension(150, 28));
        rSPanel1.add(txtCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 530, 170, -1));

        jButton1.setText("Actualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        rSPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 80, -1));

        add(rSPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 570));
    }// </editor-fold>//GEN-END:initComponents

    private void btnDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDerechaActionPerformed
        ListarTodo();
    }//GEN-LAST:event_btnDerechaActionPerformed

    private void btnDerecha2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDerecha2ActionPerformed
        // TODO add your handling code here:
        ListarVentas();
    }//GEN-LAST:event_btnDerecha2ActionPerformed

    private void btnDerecha3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDerecha3ActionPerformed
        // TODO add your handling code here:
        ListarCompras();
    }//GEN-LAST:event_btnDerecha3ActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        LimpiarComponentes();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void cboTipoCompraVentaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboTipoCompraVentaItemStateChanged
        // TODO add your handling code here:
        String tipo=String.valueOf(cboTipoCompraVenta.getSelectedItem());
        if(tipo.equals("COMPRA")){
            cboTipoDocumento.setEditable(false);
            txtTotal.setEditable(true);
            txtNumDoc.setEditable(true);
            txtEmpleado.setEditable(false);
            txtnroProveedor.setEditable(true);
            txtRazonSocial.setEditable(false);            
            txtRazonSocial.setText("Laboratorio cl√≠nico OMYLAB");
            cboTipoDocumento.setSelectedItem("FACTURA");
            txtProveedor.setEditable(true);

            btnGuardar.setEnabled(true);
            btnEditar1.setEnabled(true);
            btnDerecha1.setEnabled(true);
            btnIzquierda.setEnabled(true);
            btnBuscarProveedor.setEnabled(true);
            cboTipoDocumento.setEnabled(false);
            
        }
        if(tipo.equals("VENTA")){
            
            btnGuardar.setEnabled(false);
            btnEditar1.setEnabled(false);
            btnDerecha1.setEnabled(false);
            btnIzquierda.setEnabled(false);
            btnBuscarProveedor.setEnabled(false);
            
            cboTipoDocumento.setSelectedItem("BOLETA");
            txtRazonSocial.setText("");
            cboTipoDocumento.setEnabled(false);
            
            cboTipoDocumento.setEditable(false);
            txtTotal.setEditable(false);
            txtNumDoc.setEditable(false);
            txtRazonSocial.setEditable(false);
            txtEmpleado.setEditable(false);
            txtnroProveedor.setEditable(false);
            txtProveedor.setEditable(false);
            
            
        }
    }//GEN-LAST:event_cboTipoCompraVentaItemStateChanged

    private void tblOrdenesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrdenesMouseClicked
        // TODO add your handling code here:
        

        int seleccionar=tblOrdenes.rowAtPoint(evt.getPoint());
        
        txtNumDoc.setText(String.valueOf(tblOrdenes.getValueAt(seleccionar, 0)));
        txtRazonSocial.setText(String.valueOf(tblOrdenes.getValueAt(seleccionar, 1)));
        txtTotal.setText(String.valueOf(tblOrdenes.getValueAt(seleccionar, 2)));
        
        String tipoCV=String.valueOf(tblOrdenes.getValueAt(seleccionar, 3));
        cboTipoDocumento.setSelectedItem(tipoCV);
        
        SimpleDateFormat formatoDelTexto = new SimpleDateFormat("yyyy-MM-dd");
                String strFecha = String.valueOf(tblOrdenes.getValueAt(seleccionar, 4));
                Date fecha = null;
                try {
                    fecha = formatoDelTexto.parse(strFecha);
                } catch (ParseException ex) {
                    ex.printStackTrace();
                }
        
        txtCalendar.setDate(fecha);
        
        
        ClsNDoc_Compra_Venta objND=new ClsNDoc_Compra_Venta();
        for(ClsEDoc_Compra_Venta objED:objND.MtdListarDoc_Compra_Venta()){
            
            if(txtNumDoc.getText().equals(objED.getNro_documento()))
            {   
                String idventa_en_docventa=String.valueOf(objED.getIdDoc_compra_venta());
                //---------------------------------------------------------------------------------------------------                
                //LISTAR TABLA DE LOS PRODUCTOS EN EL DOCUMENTO COMPRA VENTA
                
                    DefaultTableModel modelo = (DefaultTableModel) tblProductosFactura.getModel();
                    try {
                        int filas=tblProductosFactura.getRowCount();
                        for (int i = 0;filas>i; i++) {
                            modelo.removeRow(0);
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error al limpiar la tabla.");
                    }
                    ClsNDoc_compra_venta_Producto objND1=new ClsNDoc_compra_venta_Producto();
                    String[] datos=new String[10];
                    for(ClsEDoc_compra_venta_Producto objED1:objND1.MtdListarDoc_compra_venta_Producto()){
                        String iddocventa_en_docproduc=String.valueOf(objED1.getIdDoc_compra_venta());
                        if(idventa_en_docventa.equals(iddocventa_en_docproduc)){
                            datos[0]=String.valueOf(objED1.getIdProducto());
                            
                            int idprod_en_venta=objED1.getIdProducto();
                            String descripcionp="";
                            String cantidadp="";
                            int tipomedida=0;
                            ClsNProducto objNP=new ClsNProducto();
                            for(ClsEProducto objEP:objNP.MtdListarProducto()){
                                if(idprod_en_venta==objEP.getIdProducto())
                                {
                                    descripcionp=String.valueOf(objEP.getDescripcion());
                                    cantidadp=String.valueOf(objEP.getCantidad());
                                    tipomedida=Integer.parseInt(String.valueOf(objEP.getIdTipo_medida()));
                                    break;
                                }
                            }
                            
                            String tipoMed="";
                            int idTipo=tipomedida;
                            ClsNTipo_medida objNTM=new ClsNTipo_medida();
                            for(ClsETipo_medida objETM:objNTM.MtdListarTipo_medida()){
                                if(idTipo==objETM.getIdTipo_medida())
                                {
                                    tipoMed=String.valueOf(objETM.getDescripcion());
                                    break;
                                }
                            }
                            String nombre=descripcionp+" "+ cantidadp+" "+tipoMed;
                            datos[1]=nombre;
                            
                            datos[2]=String.valueOf(objED1.getPrecio_compra());
                            datos[3]=String.valueOf(objED1.getCantidad());
                            
                            modelo.addRow(datos);
                        }
                        
                    }
                    TableRowSorter<TableModel> Id = new TableRowSorter<TableModel>(modelo);
                    tblProductosFactura.setRowSorter(Id);
                    tblProductosFactura.getRowSorter().toggleSortOrder(1);
                    
                //---------------------------------------------------------------------------------------------------
                
                cboTipoCompraVenta.setSelectedItem(objED.getTipo());
                if(objED.getTipo().equals("COMPRA")){
                    String nrodoc_Proveedor=objED.getProveedor_nro_documento(); 
                    txtnroProveedor.setText(nrodoc_Proveedor);
                    ClsNProveedor objNP=new ClsNProveedor();
                    for(ClsEProveedor objEP:objNP.MtdListarProveedor()){
                        if(nrodoc_Proveedor.equals(objEP.getNro_documento()))
                        {
                            txtProveedor.setText(String.valueOf(objEP.getRazon_social()));
                            break;
                        }
                    }
                    txtEmpleado.setText("");
                }
                if(objED.getTipo().equals("VENTA")){
                    int idorden=objED.getIdOrden(); 
                    String nro_empleado="";
                    ClsNOrden objNO=new ClsNOrden();
                    for(ClsEOrden objEO:objNO.MtdListarOrden()){
                        if(idorden==objEO.getIdOrden())
                        {
                            nro_empleado=objEO.getEmpleado_nro_documento();
                            break;
                        }
                    }

                    ClsNEmpleado objNE=new ClsNEmpleado();
                    for(ClsEEmpleado objEE:objNE.MtdListarEmpleado()){
                        if(nro_empleado.equals(objEE.getNro_documento()))
                        {
                            String nombre=objEE.getNombre()+objEE.getApellido();
                            txtEmpleado.setText(nombre);
                            break;
                        }
                    }  
                    txtnroProveedor.setText("");
                    txtProveedor.setText("");
                    
                    
                }
                
                
                break;
            }
        }
    }//GEN-LAST:event_tblOrdenesMouseClicked

    private void btnBuscarProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarProveedorActionPerformed
        // TODO add your handling code here:
        try{
            ClsNProveedor objNP=new ClsNProveedor();
                    for(ClsEProveedor objEP:objNP.MtdListarProveedor()){
                        if(txtnroProveedor.getText().equals(objEP.getNro_documento()))
                        {
                            txtProveedor.setText(String.valueOf(objEP.getRazon_social()));
                            break;
                        }
                    }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnBuscarProveedorActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        ClsEDoc_Compra_Venta objED=new ClsEDoc_Compra_Venta();
        ClsNDoc_Compra_Venta objND=new ClsNDoc_Compra_Venta();

        
        objED.setNro_documento(txtNumDoc.getText());
        objED.setRazon_social(txtRazonSocial.getText());
        
        String dia = Integer.toString(txtCalendar.getCalendar().get(Calendar.DAY_OF_MONTH));
        String mes = Integer.toString(txtCalendar.getCalendar().get(Calendar.MONTH) + 1);
        String year = Integer.toString(txtCalendar.getCalendar().get(Calendar.YEAR));
        String fecha = (year + "-" + mes+ "-" + dia);
        
        objED.setFecha(fecha);
        
        objED.setTipo("COMPRA");
        objED.setTotal(Double.parseDouble(txtTotal.getText()));
        objED.setEstado(1);
        
        String idTipo=String.valueOf(cboTipoDocumento.getSelectedItem());
        ClsNTipo_documento objNTD=new ClsNTipo_documento();
        for(ClsETipo_documento objE:objNTD.MtdListarTipo_documento()){
            if(idTipo.equals(objE.getDescripcion()))
            {
                objED.setIdTipo_documento(objE.getIdTipo_documento());
                break;
            }
        }
        objED.setProveedor_nro_documento(txtnroProveedor.getText());
        
        
        if(objND.MtdRegistrarDoc_Compra(objED)==true){
            JOptionPane.showMessageDialog(null, "Datos guardados correctamente.");
            //-------------------------------------------------------------------------------------------------
            //  REGISTRAR DOC_COMPRA_VENTA_HAS_PRODUCTOS
            try {
                DefaultTableModel modelo1 = (DefaultTableModel) tblProductosFactura.getModel();
                int filas=tblProductosFactura.getRowCount();
                //RECORRE LAS FILAS DE LA TABLA DE PRODUCTOS DE LA FACTURA
                for (int i = 0;filas>i; i++) {
                        //GUARDAR EN LA TABLA DOC_COMPRA_VENTA_HAS_PRODUCTO
                        ClsEDoc_compra_venta_Producto objEDP=new ClsEDoc_compra_venta_Producto();
                        ClsNDoc_compra_venta_Producto objNDP=new ClsNDoc_compra_venta_Producto();
                        
                        int idProduc=Integer.parseInt(String.valueOf(modelo1.getValueAt(i, 0)));
                        Double preciocompra=Double.valueOf(String.valueOf(modelo1.getValueAt(i, 2)));
                        int cantidad=Integer.parseInt(String.valueOf(modelo1.getValueAt(i, 3)));
                        
                        int mayor=0,idDoc=0;
                        ClsNDoc_Compra_Venta objNDCV=new ClsNDoc_Compra_Venta();
                        for(ClsEDoc_Compra_Venta objEDCV:objNDCV.MtdListarDoc_Compra_Venta()){
                            idDoc=Integer.parseInt(String.valueOf(objEDCV.getIdDoc_compra_venta()));
                            if(idDoc>mayor)
                            {
                                mayor=idDoc;
                                break;
                            }
                        }
                        JOptionPane.showMessageDialog(null, mayor);
                        objEDP.setIdProducto(idProduc);
                        objEDP.setIdDoc_compra_venta(mayor);
                        objEDP.setPrecio_compra(preciocompra);
                        objEDP.setCantidad(cantidad);
                        
                        if(objNDP.MtdRegistrarDoc_compra_venta_Producto(objEDP)==true){
                            //JOptionPane.showMessageDialog(null, "Datos guardados correctamente.");   
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Error de Datos");
                        }
                        
                        //------------------------------------------------
                        //AGREGAR A LA TABLA PRODUCTO DETALLE
                        int resp=1;
            
                        ClsNProducto NP2=new ClsNProducto();
                        for(ClsEProducto objEP1:NP2.MtdListarProducto()){
                            if(idProduc==objEP1.getIdProducto())
                            {
                                //JOptionPane.showMessageDialog(null, "Encontro el producto");
                                
                                String fecha1="";
                                while(resp==1){
                                        fecha1=JOptionPane.showInputDialog(null, "Ingrese la fecha de vencimiento de los "+String.valueOf(cantidad)+" productos.\nFormtato: yyyy-mm-dd");
                                        resp = JOptionPane.showConfirmDialog(null, "No podr√° modificar la fecha luego\n¬øEst√° seguro de continuar?", "Verificacion", JOptionPane.YES_NO_OPTION);
                                        if (resp == JOptionPane.YES_OPTION) {
                                            resp=0;
                                        }
                                        if (resp == JOptionPane.NO_OPTION) {
                                            resp=1;
                                        }           
                                    }
                                //ingresar a productos dealle - Segun stock ingresado
                                for(int i1=0;i1<cantidad;i1++){
                                    ClsEProducto_detalle objEPD=new ClsEProducto_detalle();
                                    ClsNProducto_detalle objNPD=new ClsNProducto_detalle();

                                    objEPD.setIdProducto(objEP1.getIdProducto());
                                    objEPD.setCantidad(objEP1.getCantidad());
                                    objEPD.setFech_vencimiento(fecha1);

                                    //JOptionPane.showMessageDialog(null, fecha1);
                                    if(objNPD.MtdRegistrarProducto_detalle(objEPD)==true){
                                        //JOptionPane.showMessageDialog(null, "Datos guardados correctamente.");
                                    }
                                    else{                
                                        JOptionPane.showMessageDialog(null, "Error de Datos en producto detalle");
                                    }
                                }

                                break;
                            }
                        }
                       //---------------------------------------------------------- 
                       //ACTUALIZAR STOCK EN LA TABLA PRODUCTOS
                       ClsNProducto objNP3=new ClsNProducto();
                       ClsEProducto objEP3=new ClsEProducto();
                       objEP3.setIdProducto(idProduc);
                       objEP3.setStock(cantidad);
                       
                       if(objNP3.MtdModificarProductoStockCompra(objEP3)==true){
                            JOptionPane.showMessageDialog(null, "Datos modificados correctamente.");
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Error de Datos");
                        }
                    }
                
                }
             catch (Exception e) {
            }
            //-----------------------------------------------------------------------------------------
            
            //
            
        }
            
        
        else{
            JOptionPane.showMessageDialog(null, "Error de Datos");
        }

    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnDerecha1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDerecha1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo = (DefaultTableModel) tblProductosFactura.getModel();
        String[] datos=new String[5];
        datos[0] = ""+tblProductosTodos.getValueAt(tblProductosTodos.getSelectedRow(),0);
        datos[1] = ""+tblProductosTodos.getValueAt(tblProductosTodos.getSelectedRow(),1);
        datos[2] = txtPrecioCompra.getText();
        datos[3] = txtCantidad.getText();
        
        int llave=0;
        try {
            int filas=tblProductosFactura.getRowCount();
            for (int i = 0;filas>i; i++) {
                if(datos[0].equals(modelo.getValueAt(i, 0))){
                    llave=1;
                }
            }
        } catch (Exception e) {
        }
        if(llave==0){
            modelo.addRow(datos);
            
            txtPrecioCompra.setText("");
            txtCantidad.setText("");
            
            
            }
        
        else{
            JOptionPane.showMessageDialog(null, "El producto ya fue agregado a la orden.");
        }
        Double total=0.0;
            try {
                int filas=tblProductosFactura.getRowCount();
                for (int i = 0;filas>i; i++) {
                    Double precioagregado=Double.parseDouble(""+modelo.getValueAt(i, 2));
                    Double cantidad=Double.parseDouble(""+modelo.getValueAt(i, 3));
                    total=total+(precioagregado*cantidad);
                }
            } catch (Exception e) {
            }
                double totalredondeado = Math.round(total*100.0)/100.0;
                txtTotal.setText(""+totalredondeado);
    }//GEN-LAST:event_btnDerecha1ActionPerformed

    private void tblProductosTodosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductosTodosMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_tblProductosTodosMouseClicked

    private void btnIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzquierdaActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo = (DefaultTableModel) tblProductosFactura.getModel();
        modelo.removeRow(tblProductosFactura.getSelectedRow());
    }//GEN-LAST:event_btnIzquierdaActionPerformed

    private void tblProductosFacturaComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_tblProductosFacturaComponentAdded
        // TODO add your handling code here:
        
    }//GEN-LAST:event_tblProductosFacturaComponentAdded

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ListarProductos();;
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private RSMaterialComponent.RSButtonMaterialIconOne btnBuscarProveedor;
    private RSMaterialComponent.RSButtonMaterialOne btnDerecha;
    private RSMaterialComponent.RSButtonMaterialOne btnDerecha1;
    private RSMaterialComponent.RSButtonMaterialOne btnDerecha2;
    private RSMaterialComponent.RSButtonMaterialOne btnDerecha3;
    private RSMaterialComponent.RSButtonMaterialIconOne btnEditar1;
    private RSMaterialComponent.RSButtonMaterialIconOne btnGuardar;
    private RSMaterialComponent.RSButtonMaterialOne btnIzquierda;
    private RSMaterialComponent.RSButtonMaterialIconOne btnLimpiar;
    private javax.swing.JComboBox<String> cboTipoCompraVenta;
    private javax.swing.JComboBox<String> cboTipoDocumento;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblidCompraVenta;
    private necesario.RSPanel rSPanel1;
    private javax.swing.JTable tblOrdenes;
    private javax.swing.JTable tblProductosFactura;
    private javax.swing.JTable tblProductosTodos;
    private com.toedter.calendar.JDateChooser txtCalendar;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtEmpleado;
    private javax.swing.JTextField txtNumDoc;
    private javax.swing.JTextField txtPrecioCompra;
    private javax.swing.JTextField txtProveedor;
    private javax.swing.JTextField txtRazonSocial;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtnroProveedor;
    // End of variables declaration//GEN-END:variables

    private void ListarTodo() {
        DefaultTableModel modelo = (DefaultTableModel) tblOrdenes.getModel();
        try {
            int filas=tblOrdenes.getRowCount();
            for (int i = 0;filas>i; i++) {
                modelo.removeRow(0);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al limpiar la tabla.");
        }
        ClsNDoc_Compra_Venta objND=new ClsNDoc_Compra_Venta();
        String[] datos=new String[5];
        for(ClsEDoc_Compra_Venta objED:objND.MtdListarDoc_Compra_Venta()){
            datos[0]=objED.getNro_documento();
            datos[1]=objED.getRazon_social();
            datos[2]=String.valueOf(objED.getTotal());
            
            int idTipoDoc=objED.getIdTipo_documento();
            String tipo="";
            ClsNTipo_documento objNTD=new ClsNTipo_documento();
            
            for(ClsETipo_documento objETD:objNTD.MtdListarTipo_documento()){
                int tipodoc=objETD.getIdTipo_documento();
                if(idTipoDoc==tipodoc){
                    datos[3]=objETD.getDescripcion();
                    break;
                }
            }
            
            datos[4]=objED.getFecha();
            
            modelo.addRow(datos);
        }
        TableRowSorter<TableModel> Id = new TableRowSorter<TableModel>(modelo);
        tblOrdenes.setRowSorter(Id);
        tblOrdenes.getRowSorter().toggleSortOrder(4);
    }

   

    private void LimpiarComponentes() {
        txtEmpleado.setText("");
        txtNumDoc.setText("");
        txtRazonSocial.setText("");
        txtnroProveedor.setText("");
        txtProveedor.setText("");
        
        txtTotal.setText("0");
        btnGuardar.setEnabled(true);
            btnEditar1.setEnabled(true);
            btnDerecha1.setEnabled(true);
            btnIzquierda.setEnabled(true);
            btnBuscarProveedor.setEnabled(true);
        
    }

    private void ListarCompras() {
      DefaultTableModel modelo = (DefaultTableModel) tblOrdenes.getModel();
        try {
            int filas=tblOrdenes.getRowCount();
            for (int i = 0;filas>i; i++) {
                modelo.removeRow(0);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al limpiar la tabla.");
        }
        ClsNDoc_Compra_Venta objND=new ClsNDoc_Compra_Venta();
        String[] datos=new String[5];
        for(ClsEDoc_Compra_Venta objED:objND.MtdListarDoc_Compra()){
            datos[0]=objED.getNro_documento();
            datos[1]=objED.getRazon_social();
            datos[2]=String.valueOf(objED.getTotal());
            
            int idTipoDoc=objED.getIdTipo_documento();
            String tipo="";
            ClsNTipo_documento objNTD=new ClsNTipo_documento();
            
            for(ClsETipo_documento objETD:objNTD.MtdListarTipo_documento()){
                int tipodoc=objETD.getIdTipo_documento();
                if(idTipoDoc==tipodoc){
                    datos[3]=objETD.getDescripcion();
                    break;
                }
            }
            
            datos[4]=objED.getFecha();
            
            modelo.addRow(datos);
        }
        TableRowSorter<TableModel> Id = new TableRowSorter<TableModel>(modelo);
        tblOrdenes.setRowSorter(Id);
        tblOrdenes.getRowSorter().toggleSortOrder(4);
    }

    private void ListarVentas() {
        DefaultTableModel modelo = (DefaultTableModel) tblOrdenes.getModel();
        try {
            int filas=tblOrdenes.getRowCount();
            for (int i = 0;filas>i; i++) {
                modelo.removeRow(0);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al limpiar la tabla.");
        }
        ClsNDoc_Compra_Venta objND=new ClsNDoc_Compra_Venta();
        String[] datos=new String[5];
        for(ClsEDoc_Compra_Venta objED:objND.MtdListarDoc_Venta()){
            datos[0]=objED.getNro_documento();
            datos[1]=objED.getRazon_social();
            datos[2]=String.valueOf(objED.getTotal());
            
            int idTipoDoc=objED.getIdTipo_documento();
            String tipo="";
            ClsNTipo_documento objNTD=new ClsNTipo_documento();
            
            for(ClsETipo_documento objETD:objNTD.MtdListarTipo_documento()){
                int tipodoc=objETD.getIdTipo_documento();
                if(idTipoDoc==tipodoc){
                    datos[3]=objETD.getDescripcion();
                    break;
                }
            }
            
            datos[4]=objED.getFecha();
            
            modelo.addRow(datos);
        }
        TableRowSorter<TableModel> Id = new TableRowSorter<TableModel>(modelo);
        tblOrdenes.setRowSorter(Id);
        tblOrdenes.getRowSorter().toggleSortOrder(4);
    }

    private void ListarProductos() {
        DefaultTableModel modelo = (DefaultTableModel) tblProductosTodos.getModel();
        try {
            int filas=tblProductosTodos.getRowCount();
            for (int i = 0;filas>i; i++) {
                modelo.removeRow(0);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al limpiar la tabla.");
        }
        ClsNProducto objNP=new ClsNProducto();
        String[] datos=new String[10];
        for(ClsEProducto objEP:objNP.MtdListarProducto()){
            datos[0]=String.valueOf(objEP.getIdProducto());
            
            String tipoMed="";
            int idTipo=objEP.getIdTipo_medida();
            ClsNTipo_medida objNTM=new ClsNTipo_medida();
            for(ClsETipo_medida objETM:objNTM.MtdListarTipo_medida()){
                if(idTipo==objETM.getIdTipo_medida())
                {
                    tipoMed=String.valueOf(objETM.getDescripcion());
                    break;
                }
            }
            String nombre=String.valueOf(objEP.getDescripcion())+" "+ String.valueOf(objEP.getCantidad())+" "+tipoMed;
            datos[1]=nombre;
            modelo.addRow(datos);
        }
        TableRowSorter<TableModel> Id = new TableRowSorter<TableModel>(modelo);
        tblProductosTodos.setRowSorter(Id);
        tblProductosTodos.getRowSorter().toggleSortOrder(1);
    }

   

    
}
